{"version":3,"sources":["components/ThreeContainer.js","threejs/BlackHoleGL.js","components/StarCluster.js","threejs/StarClusterGL.js","App.js","components/SolarSystem.js","threejs/SolarSystemGL.js","serviceWorker.js","index.js"],"names":["ThreeContainer","sceneRef","mixer","composer","clock","THREE","params","scene","BackroundLoader","load","background","renderer","setSize","window","innerWidth","innerHeight","appendChild","domElement","sizes","width","height","camera","position","x","y","z","add","loader","GLTFLoader","gltf","children","forEach","mesh","scale","set","rotation","xhr","console","log","loaded","total","error","animations","clip","clipAction","play","Array","a","geometry","material","color","star","fill","map","randFloatSpread","SphereGeometry","BoxGeometry","CrystalGeomtry","metal","roughness","metalness","basic","transparent","opacity","BlackHoleButton","diveToHole","event","preventDefault","vector","clientX","clientY","unproject","sub","normalize","intersectObject","length","gsap","to","duration","stagger","removeEventListener","addEventListener","destroy","onload","Crystal","LeftLight","renderScene","RenderPass","bloomPass","UnrealBloomPass","threshold","strength","radius","EffectComposer","addPass","aspect","updateProjectionMatrix","setPixelRatio","Math","min","devicePixelRatio","e","deltaY","controls","OrbitControls","target","rotateSpeed","enableZoom","update","animate","object","requestAnimationFrame","delta","getDelta","render","location","href","ThreeEntryPoint","this","className","ref","element","Component","cluster","boundingBoxCenter","boundingBox","setFromObject","getCenter","CircleGeometry","Linematerial","linewidth","fog","SolarSystem","SolarSystemBall","BlackHole","BlackHoleBall","diveToPoint","sleep","ms","Promise","resolve","setTimeout","raycaster","intersectsSolar","onkeydown","glg","keyCode","undefined","lookAt","StarClusterGL","App","props","State","state","tag","document","getElementById","innerHTML","dat","querySelector","planetButtons","size","btn","Planets","mercury","FocusPlanet","intersectsMercury","interVenus","interEarth","interMars","interJupiter","interSaturn","interUran","interNeptune","interSun","Animate_focus","X","Y","Z","SolarSystemGL","Planet","localStorage","getItem","id","Boolean","hostname","match","rootElement","ReactDOM","path","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7563a85b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ThreeEntryPoint from '../threejs/BlackHoleGL';\r\nimport \"../App.css\"\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nexport default class ThreeContainer extends Component {\r\n\r\n  componentDidMount() {\r\n    ThreeEntryPoint(this.scene);\r\n  }\r\n\r\n\r\n  \r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <div className=\"canvas\" ref={element => this.scene = element} />\r\n      </div>\r\n    );\r\n  }\r\n}","// Import dependencies\r\nimport * as THREE from 'three'\r\nimport gsap from \"gsap\";\r\nimport * as dat from 'dat.gui'\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass.js\";\r\nimport { Sphere } from 'three';\r\n\r\n\r\nexport default function ThreeEntryPoint(sceneRef) {\r\n\r\n  /** \r\n   * init things\r\n   * */ \r\n\r\n \r\n  let mixer;\r\n  let clock = new THREE.Clock()\r\n\r\n  let composer;\r\n  const params = {\r\n    exposure: 1,\r\n    bloomStrength: 1,\r\n    bloomThreshold: 0,\r\n    bloomRadius: 0\r\n  };\r\n\r\n\r\n  const scene = new THREE.Scene();\r\n  const BackroundLoader = new THREE.CubeTextureLoader();\r\n  const imgTexture = new THREE.TextureLoader().load(\"./1773008.png\");\r\n  const Cubetexture = BackroundLoader.load([\r\n    \"./N00282243.jpg\",\r\n    \"./N00282243.jpg\",\r\n    \"./N00282243.jpg\",\r\n    \"./N00282243.jpg\",\r\n    \"./N00282243.jpg\",\r\n    \"./N00282243.jpg\",\r\n  ]);\r\n  scene.background = new THREE.Color(0x000000);\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  sceneRef.appendChild(renderer.domElement);\r\n\r\n  const sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n  }\r\n  const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\n  camera.position.x = 0\r\n  camera.position.y = 0\r\n  camera.position.z = 5.5\r\n  scene.add(camera)\r\n\r\n\r\n\r\n \r\n\r\n  /**\r\n   * Load Model \r\n   * */\r\n\r\n  // OBJ\r\n  /*const mtlLoader = new MTLLoader();\r\n  mtlLoader.load(\"./room.mtl\", (mtl) => {\r\n    mtl.preload();\r\n    objLoader.setMaterials(mtl);\r\n    objLoader.load(\"./room.obj\", (root) => {\r\n\r\n      root.position.x = 0;\r\n      root.position.y = 0;\r\n      root.position.z = 0;\r\n  \r\n      root.scale.set(0.1, 0.1, 0.1);\r\n\r\n      scene.add(root)\r\n    })\r\n  }) */\r\n\r\n  /**\r\n   * LOAD MODEL:_ GTLF\r\n   */\r\n\r\n  // Japan Shrine\r\n  const loader = new GLTFLoader();\r\n\r\n  loader.load(\r\n    './japanShrine/scene.gltf',\r\n    ( gltf ) => {\r\n\r\n      const children = gltf.scene.children;\r\n      children.forEach((mesh) => {\r\n        mesh.position.x = 0;\r\n        mesh.position.y = -2;\r\n        mesh.position.z = 0;\r\n        mesh.scale.set(0.05, 0.05 ,0.05)\r\n\r\n        mesh.rotation.z = 4.7;\r\n      })\r\n\r\n      // called when the resource is loaded\r\n      // scene.add( gltf.scene );\r\n    },\r\n    ( xhr ) => {\r\n      // called while loading is progressing\r\n      console.log( `${( xhr.loaded / xhr.total * 100 )}% loaded` );\r\n    },\r\n    ( error ) => {\r\n      // called when loading has errors\r\n      console.error( 'An error happened', error );\r\n    },\r\n  );\r\n\r\n\r\n  // black hole\r\n  var blackHolechildren;\r\n\r\n  loader.load(\"./BlackHoleModel/scene.gltf\", (gltf) => {\r\n\r\n      blackHolechildren = gltf.scene.children;\r\n      blackHolechildren.forEach((mesh) => {\r\n\r\n        if (window.innerWidth < 948)\r\n        {\r\n          mesh.scale.set(0.02, 0.02, 0.02);\r\n          mesh.position.x = 0;\r\n\r\n        } else {\r\n          mesh.position.x = 0;\r\n          mesh.scale.set(0.02, 0.02, 0.02);\r\n\r\n        }\r\n        mesh.position.y = -1;\r\n\r\n\r\n      }) \r\n      \r\n      mixer = new THREE.AnimationMixer(gltf.scene);\r\n      gltf.animations.forEach(\r\n        (clip) => {\r\n\r\n          var action = mixer.clipAction(clip);\r\n          action.play();\r\n\r\n        }\r\n      )\r\n      \r\n      scene.add(gltf.scene);\r\n      \r\n\r\n    },\r\n    (xhr) => {\r\n      console.log(`${( xhr.loaded / xhr.total * 100 )}% loaded` );\r\n    },\r\n    (error) => {\r\n      console.log(error);\r\n    }\r\n  );\r\n\r\n\r\n   /**\r\n    * Basic Objects\r\n    * */\r\n\r\n  // generate Background Stars\r\n  var [x_l, y_l, z_l] = Array(3);\r\n  async function Stars()\r\n  {\r\n    const geometry = new THREE.SphereBufferGeometry(.25, 20, 20);\r\n    const material = new THREE.MeshStandardMaterial();\r\n    //material.roughness = 2;\r\n    //material.metalness = 4;\r\n    material.color = new THREE.Color(0xffffff);\r\n\r\n    const star = new THREE.Mesh(geometry, material);\r\n\r\n    const [x, y, z] = Array(3).fill().map(\r\n      () => THREE.Math.randFloatSpread( 100 )\r\n    );\r\n    x_l = x;\r\n    y_l = y;\r\n    z_l = z;\r\n\r\n    star.position.set(x, y, z);\r\n    scene.add(star);\r\n  }\r\n  Array(200).fill().forEach(Stars);\r\n\r\n\r\n\r\n  const SphereGeometry = new THREE.SphereBufferGeometry(.5, 35, 35);\r\n  const BoxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n  const CrystalGeomtry = new THREE.OctahedronBufferGeometry(.5);\r\n  \r\n  // crystal button\r\n \r\n\r\n  // Materials\r\n\r\n  const metal = new THREE.MeshStandardMaterial();\r\n  metal.roughness = 0.3;\r\n  metal.metalness = 0.5;\r\n  metal.color = new THREE.Color(0xffffff);\r\n\r\n  const basic = new THREE.MeshBasicMaterial();\r\n  basic.transparent = true;\r\n  basic.opacity = 0.1;\r\n\r\n  // Mesh\r\n\r\n  /**\r\n   * Click On Black Hole To Transport\r\n   */\r\n  const BlackHoleButton = new THREE.Mesh(SphereGeometry , basic);\r\n  if (window.innerWidth < 948)\r\n  {\r\n    BlackHoleButton.position.y = -1\r\n    BlackHoleButton.scale.set(2.2, 2.2, 2.2);\r\n    scene.add(BlackHoleButton);\r\n\r\n  } \r\n  else \r\n  {\r\n    BlackHoleButton.position.y = -1\r\n    BlackHoleButton.position.x = 0\r\n    BlackHoleButton.scale.set(2.2, 2.2, 2.2);\r\n\r\n    scene.add(BlackHoleButton);\r\n  }\r\n\r\n  function diveToHole(event)\r\n  {\r\n    event.preventDefault();\r\n\r\n    var vector = new THREE.Vector3(\r\n      (event.clientX / window.innerWidth) * 2 - 1, \r\n      -(event.clientY / window.innerHeight) * 2 + 1, 0.5\r\n    );\r\n    vector = vector.unproject(camera);\r\n\r\n    var raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n    var intersects = raycaster.intersectObject(BlackHoleButton, true); // Circle element which you want to identify\r\n\r\n    if (intersects.length > 0) {\r\n      gsap.to(camera.position,\r\n        {\r\n          duration: 1,\r\n          x: BlackHoleButton.position.x,\r\n          y: BlackHoleButton.position.y,\r\n          z: BlackHoleButton.position.z,\r\n          stagger: 0.5\r\n        });\r\n    }\r\n\r\n    window.removeEventListener(\"touchend\", diveToHole);\r\n    window.addEventListener(\"click\", diveToHole);\r\n  }\r\n\r\n  function destroy()\r\n  {\r\n    window.removeEventListener(\"click\", diveToHole);\r\n    window.addEventListener(\"touchend\", diveToHole);\r\n  }\r\n\r\n  window.onload = function()\r\n  {\r\n    window.addEventListener(\"click\", diveToHole);\r\n    window.addEventListener(\"touchstart\", destroy);\r\n  }\r\n  \r\n\r\n  // other meshes\r\n  \r\n  const Cube = new THREE.Mesh(BoxGeometry , metal);\r\n  // scene.add(Cube);\r\n\r\n  \r\n  const Crystal = new THREE.Mesh(CrystalGeomtry, metal);\r\n\r\n  if (window.innerWidth < 948)\r\n  {\r\n    Crystal.position.x = 0;\r\n    Crystal.position.y =  -0.5;\r\n    Crystal.position.z = 2;\r\n    Crystal.scale.set(.25, .25, .25);\r\n    // scene.add(Crystal);\r\n\r\n\r\n  } else {\r\n\r\n    Crystal.position.x = 3;\r\n    Crystal.position.y =  -0.5;\r\n    Crystal.position.z = 1;\r\n    // scene.add(Crystal);\r\n  }\r\n\r\n\r\n\r\n   /**\r\n    * LIGHTS\r\n    * */\r\n\r\n  const LeftLight = new THREE.PointLight(0xffffff, 1.5);\r\n  LeftLight.position.x = -2.1;\r\n  LeftLight.position.y = 3.4;\r\n  LeftLight.position.z = 6.4;\r\n  scene.add(LeftLight);\r\n\r\n\r\n  const starLig = new THREE.AmbientLight(0xffffff, 0.6);\r\n  // scene.add(starLig);\r\n\r\n  const renderScene = new RenderPass( scene, camera );\r\n\r\n  const bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\r\n  bloomPass.threshold = params.bloomThreshold;\r\n  bloomPass.strength = params.bloomStrength;\r\n  bloomPass.radius = params.bloomRadius;\r\n\r\n  composer = new EffectComposer( renderer );\r\n  composer.addPass( renderScene );\r\n  composer.addPass( bloomPass );\r\n\r\n\r\n  /**\r\n   * Rendering\r\n   * */\r\n\r\n  window.addEventListener('resize', () =>\r\n  {\r\n      // Update sizes\r\n      sizes.width = window.innerWidth\r\n      sizes.height = window.innerHeight\r\n\r\n      // Update camera\r\n      camera.aspect = sizes.width / sizes.height\r\n      camera.updateProjectionMatrix()\r\n\r\n      // Update renderer\r\n      renderer.setSize(sizes.width, sizes.height)\r\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n      composer.setSize( sizes.width, sizes.height );\r\n\r\n  })\r\n\r\n  if (window.innerWidth > 948)\r\n  {\r\n    \r\n    window.addEventListener(\"wheel\", (e) => {\r\n\r\n      if (e.deltaY < 0)\r\n      {\r\n        gsap.to(camera.position, \r\n        {\r\n          duration: 1, x: camera.position.x - 0.5, z: camera.position.z + 0.5, stagger: 0.5\r\n        });\r\n      }\r\n      else if (e.deltaY > 0)\r\n      {\r\n        gsap.to(camera.position, \r\n          {\r\n            duration: 1, x: camera.position.x + 0.5, z: camera.position.z - 0.5, stagger: 0.5\r\n          });\r\n      }\r\n\r\n    }, true);  \r\n\r\n  } else {\r\n\r\n  }\r\n\r\n  \r\n  \r\n\r\n  let controls = new OrbitControls(camera, sceneRef);\r\n  controls.target.set(0, 0, 0);\r\n  controls.rotateSpeed = 0.5;\r\n  controls.enableZoom = false;\r\n  controls.update();\r\n\r\n\r\n  function rotation (object)\r\n  {\r\n    object.rotation.x += 0.005;\r\n    object.rotation.y += 0.005;\r\n    // object.rotation.z += 0.005;\r\n\r\n  }\r\n\r\n  const animate = function () {\r\n    requestAnimationFrame(animate);\r\n\r\n    rotation(Crystal);\r\n\r\n    // black hole rotation\r\n    var delta = clock.getDelta();\r\n    if (mixer)\r\n    {\r\n      mixer.update( delta );\r\n    }  \r\n      \r\n\r\n    renderer.render(scene, camera);\r\n    composer.render();\r\n\r\n\r\n    // change route to star cluster\r\n    if (camera.position.z == 0 && camera.position.y == -1 && (camera.position.x == 0 || camera.position.x == 5))\r\n    {\r\n      window.location.href = \"https://SightMan3.github.io/\";\r\n    }\r\n\r\n\r\n\r\n  };\r\n  \r\n  // Call the animate function\r\n  animate();\r\n  \r\n\r\n}","import React, { Component } from 'react';\r\nimport StarClusterGL from \"../threejs/StarClusterGL\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../App.css\"\r\n\r\nexport default class ThreeContainer extends Component {\r\n\r\n  componentDidMount() {\r\n    StarClusterGL(this.scene);\r\n  }\r\n\r\n  \r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div　className=\"headline_cluster\">\r\n          C L U S T E R\r\n          <div className=\"cluster_small_head\">M i l k y W a y</div>\r\n          <div className=\"cluster_small_head\">L a n i a k e a</div>\r\n          <div className=\"cluster_small_head\">3 r d &nbsp; q u a d r a n t</div>\r\n          \r\n        </div>\r\n        <div className=\"footer_cluster\">\r\n          press & move mous for interaction &nbsp; | &nbsp; click circles for transport\r\n        </div>\r\n\r\n        <div className=\"canvas\" ref={element => this.scene = element} />\r\n      </div>\r\n    );\r\n  }\r\n}","// Import dependencies\r\nimport * as THREE from 'three'\r\nimport gsap from \"gsap\";\r\nimport * as dat from 'dat.gui'\r\n\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass.js\";\r\nimport { Sphere } from 'three';\r\n\r\n\r\nexport default function StarClusterGL(sceneRef) {\r\n\r\n  /** \r\n   * init things\r\n   * */ \r\n\r\n\r\n  const scene = new THREE.Scene();\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  sceneRef.appendChild(renderer.domElement);\r\n\r\n  const sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n  }\r\n  const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 1000)\r\n  camera.position.x = 676;\r\n  camera.position.y = 585;\r\n  camera.position.z = -128;\r\n  scene.add(camera)\r\n\r\n\r\n  \r\n\r\n\r\n  let composer;\r\n  const params = {\r\n    exposure: 1,\r\n    bloomStrength: 1.16,\r\n    bloomThreshold: 0,\r\n    bloomRadius: 1\r\n  };\r\n\r\n  let clusterLaoded = false;\r\n\r\n  /**\r\n   * Render Models\r\n   */\r\n\r\n  var cluster;\r\n  var boundingBox = new THREE.Box3();\r\n  var boundingBoxCenter;\r\n\r\n  const tfLoader = new GLTFLoader();\r\n  tfLoader.load(\"./SC/scene.gltf\", \r\n    (gltf) => {\r\n      cluster = gltf.scene.children;\r\n      cluster.forEach((mesh) => {\r\n        mesh.position.x = 676;\r\n        mesh.position.y = 585;\r\n        mesh.position.z = -128;\r\n        mesh.scale.set(3, 3 ,3);\r\n        \r\n        boundingBox.setFromObject(mesh);\r\n        boundingBoxCenter = boundingBox.getCenter();\r\n\r\n      })\r\n\r\n\r\n      clusterLaoded = true;\r\n      scene.add( gltf.scene );\r\n\r\n    },\r\n    (xhr) => {\r\n      console.log( `${( xhr.loaded / xhr.total * 100 )}% loaded` );\r\n    },\r\n    (error) => {\r\n      console.log(error);\r\n    }\r\n  )  \r\n\r\n \r\n\r\n  /**\r\n   * Geometry && Meshes\r\n   */\r\n\r\n  function distanceVector( v1, v2 )\r\n  {\r\n    var dx = v1.x - v2.x;\r\n    var dy = v1.y - v2.y;\r\n    var dz = v1.z - v2.z;\r\n\r\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n  }\r\n\r\n  const SphereGeometry = new THREE.SphereBufferGeometry(20, 35, 35);\r\n  const BoxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n  const CrystalGeomtry = new THREE.OctahedronBufferGeometry(.5);\r\n  const CircleGeometry = new THREE.RingGeometry(20, 20, 100);\r\n \r\n\r\n  // Materials\r\n\r\n  const metal = new THREE.MeshStandardMaterial();\r\n  metal.roughness = 0.3;\r\n  metal.metalness = 0.5;\r\n  metal.color = new THREE.Color(0xffffff);\r\n\r\n  const basic = new THREE.MeshBasicMaterial();\r\n  basic.transparent = true;\r\n  basic.opacity = 0.1;\r\n\r\n  const Linematerial = new THREE.LineBasicMaterial( { color: 0xf3652a, linewidth: 1, fog: true } );\r\n  const LinematerialB = new THREE.LineBasicMaterial( { color: 0x000000, linewidth: 1, fog: true } );\r\n  \r\n  // MESHES\r\n  const Cube = new THREE.Mesh(BoxGeometry , metal);\r\n\r\n\r\n  // transporters\r\n  const SolarSystem = new THREE.LineLoop( CircleGeometry, Linematerial)\r\n  const SolarSystemBall = new THREE.Mesh( SphereGeometry, basic );\r\n  SolarSystemBall.position.set(333, 101, 122);\r\n  SolarSystem.position.set(333, 101, 122);\r\n  SolarSystem.rotation.set(-0.1, 2.1, 0);\r\n\r\n  scene.add(SolarSystem);\r\n  scene.add(SolarSystemBall)\r\n\r\n  const BlackHole = new THREE.LineLoop( CircleGeometry, Linematerial)\r\n  const BlackHoleBall = new THREE.Mesh( SphereGeometry, basic );\r\n  BlackHoleBall.position.set(42, 161, -277);\r\n  BlackHole.position.set(42, 161, -277);\r\n  BlackHole.rotation.set(-0.1, 2.1, 0);\r\n\r\n  scene.add(BlackHole);\r\n  scene.add(BlackHoleBall)\r\n\r\n\r\n  \r\n\r\n  // scene.add(Cube);\r\n\r\n\r\n\r\n\r\n\r\n\r\n   /**\r\n    * LIGHTS\r\n    * */\r\n\r\n  const LeftLight = new THREE.PointLight(0xffffff, 1.5);\r\n  LeftLight.position.x = -2.1;\r\n  LeftLight.position.y = 3.4;\r\n  LeftLight.position.z = 6.4;\r\n  scene.add(LeftLight);\r\n\r\n  // bloom\r\n  const renderScene = new RenderPass( scene, camera );\r\n\r\n  const bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\r\n  bloomPass.threshold = params.bloomThreshold;\r\n  bloomPass.strength = params.bloomStrength;\r\n  bloomPass.radius = params.bloomRadius;\r\n\r\n  composer = new EffectComposer( renderer );\r\n  composer.addPass( renderScene );\r\n  composer.addPass( bloomPass );\r\n  \r\n\r\n\r\n\r\n    /**\r\n     * Controlls: zooming, moving, scrolling, transforming\r\n     */\r\n\r\n    window.addEventListener(\"wheel\", (event) => {\r\n      if (event.deltaY < 0)\r\n      {\r\n        gsap.to(camera.position, {\r\n          duration: 1,\r\n          y: camera.position.y + 50,\r\n          z: camera.position.z + 50,\r\n          stagger: 0.5\r\n        })\r\n      } \r\n      else if (event.deltaY > 0)\r\n      {\r\n        gsap.to(camera.position, {\r\n          duration: 1,\r\n          y: camera.position.y - 50,\r\n          z: camera.position.z - 50,\r\n          stagger: 0.5\r\n        })\r\n      }\r\n\r\n    });\r\n\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      console.log(camera.position);\r\n    });\r\n\r\n   \r\n    \r\n\r\n    async function diveToPoint(event)\r\n    {\r\n      event.preventDefault();\r\n  \r\n      var vector = new THREE.Vector3(\r\n        (event.clientX / window.innerWidth) * 2 - 1, \r\n        -(event.clientY / window.innerHeight) * 2 + 1, 0.5\r\n      );\r\n      vector = vector.unproject(camera);\r\n  \r\n      var raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n      var intersectsSolar = raycaster.intersectObject(SolarSystemBall, true);\r\n      var intersectsBlack = raycaster.intersectObject(BlackHoleBall, true); // Circle element which you want to identify\r\n  \r\n      function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n      }\r\n\r\n\r\n      if (intersectsBlack.length > 0) {\r\n\r\n        gsap.to(camera.position, \r\n          {\r\n            duration: 1, \r\n            x: SolarSystemBall.position.x - 150, // distance\r\n            y: SolarSystemBall.position.y + 200, // depth\r\n            z: SolarSystemBall.position.z - 200, // left || right\r\n            stagger: 0.5\r\n          });\r\n\r\n          await sleep(500);\r\n\r\n          window.location.href = \"https://SightMan3.github.io/BlackHole\"; \r\n      }\r\n      else if (intersectsSolar.length > 0)\r\n      {\r\n        gsap.to(camera.position, \r\n          {\r\n            duration: 1, \r\n            x: SolarSystemBall.position.x + 200, \r\n            y: SolarSystemBall.position.y + 175,\r\n            z: SolarSystemBall.position.z - 100,\r\n            stagger: 0.5\r\n          });\r\n\r\n        await sleep(500);\r\n\r\n        window.location.href = \"https://SightMan3.github.io/SolarSystem\"; \r\n      }\r\n  \r\n      window.removeEventListener(\"touchend\", diveToPoint);\r\n      window.addEventListener(\"click\", diveToPoint);\r\n    }\r\n\r\n    function destroy()\r\n    {\r\n      window.addEventListener(\"touchend\", diveToPoint);\r\n      window.removeEventListener(\"click\", diveToPoint);\r\n    }\r\n\r\n    window.onload = function() {\r\n      window.addEventListener(\"click\", diveToPoint);\r\n      window.addEventListener(\"touchstart\", destroy);\r\n    }\r\n\r\n    window.onkeydown = function(glg) \r\n    {\r\n      if (glg.keyCode === 32)\r\n      { \r\n        gsap.to(camera.position, \r\n          {\r\n            duration: 1,\r\n            x: 676,\r\n            y: 585,\r\n            z: -128,\r\n            stagger: 0.5\r\n          });\r\n      }  \r\n    }\r\n\r\n  /**\r\n   * Rendering\r\n   * */\r\n\r\n\r\n  window.addEventListener('resize', () =>\r\n  {\r\n    // Update sizes\r\n    sizes.width = window.innerWidth\r\n      sizes.height = window.innerHeight\r\n\r\n      // Update camera\r\n      camera.aspect = sizes.width / sizes.height\r\n      camera.updateProjectionMatrix()\r\n      \r\n      // Update renderer\r\n      renderer.setSize(sizes.width, sizes.height)\r\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n      \r\n\r\n    })\r\n\r\n  \r\n    \r\n  let controls = new OrbitControls(camera, sceneRef);\r\n  controls.enableZoom = false;\r\n  if (boundingBoxCenter != undefined)\r\n  {\r\n    controls.target = boundingBoxCenter;\r\n  }\r\n  controls.update();\r\n\r\n  //controls.target.set(camera.position.x, camera.position.y, camera.position.z);\r\n  \r\n  \r\n  \r\n\r\n  const animate = function () {\r\n    requestAnimationFrame(animate);\r\n    \r\n    renderer.render(scene, camera);\r\n    composer.render();\r\n\r\n    SolarSystem.lookAt(camera.position);\r\n    BlackHole.lookAt(camera.position);\r\n\r\n    if (cluster != undefined)\r\n    {\r\n\r\n\r\n      cluster.forEach((mesh) => {\r\n\r\n        // rotateAroundObjectAxis(mesh, mesh.position.z, 20);\r\n        //mesh.translate(0, 0, 0);\r\n    \r\n\r\n        gsap.to(mesh.position, {\r\n          duration: 1,\r\n          x: -300,\r\n          y: -250,\r\n          z: 260,\r\n          stagger: 0.5\r\n        });\r\n\r\n        gsap.to(mesh.rotation, {\r\n          duration: 1,\r\n          y: 0.0,\r\n          stagger: 1\r\n        }); \r\n\r\n\r\n      \r\n      })\r\n    } \r\n    else \r\n    {\r\n      clusterLaoded = false;\r\n    }\r\n\r\n  };\r\n  \r\n  // Call the animate function\r\n  \r\n  animate();\r\n  \r\n  \r\n}","import React from 'react';\r\nimport './App.css';\r\nimport ThreeContainer from './components/ThreeContainer';\r\nimport StarCluster from \"./components/StarCluster\"\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"section_blackHOle\">\r\n        <div className=\"headline\">\r\n          S A G I T A R I U S  A*\r\n          <div className=\"smallheadline\">C e n t e r &nbsp; o f &nbsp; G a l a x y</div>\r\n          <div className=\"smallheadline\">4 m i l i o n &nbsp; s o l a r m a s s e s</div>\r\n          <div className=\"smallheadline\">2 5 0 0 0 l y &nbsp; a w a y</div>\r\n        </div>\r\n        \r\n        <ThreeContainer />\r\n      </div>\r\n      \r\n    </div> \r\n\r\n  \r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SolarSystemGL from '../threejs/SolarSystemGL';\r\nimport \"../App.css\"\r\n\r\nexport default class ThreeContainer extends Component {\r\n\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {\r\n      \"Planet\": \"\"\r\n    };\r\n  }\r\n\r\n  State = \"S O L A R S Y S T E M\";\r\n  componentDidMount() {\r\n    SolarSystemGL(this.scene);\r\n\r\n    this.state.Planet = localStorage.getItem(\"planet\");\r\n  }\r\n\r\n\r\n  \r\n\r\n  \r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n         <div　className=\"headline_cluster headline_solar\" id=\"head\">\r\n         \r\n        </div>\r\n        <div className=\"footer_cluster\">\r\n          press space for position reset &nbsp; | &nbsp; click planets for more detail\r\n        </div>\r\n        \r\n        <div className=\"canvas\" ref={element => this.scene = element} /> \r\n      </div>\r\n    );\r\n  }\r\n}","// Import dependencies\r\nimport * as THREE from 'three'\r\nimport gsap from \"gsap\";\r\nimport * as dat from 'dat.gui'\r\n\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass.js\";\r\nimport { Sphere } from 'three';\r\nimport React from 'react';\r\n\r\n\r\nexport default function StarClusterGL(sceneRef) {\r\n\r\n\r\n    var tag = document.getElementById(\"head\");\r\n    tag.innerHTML = \"S O L A R S Y S T E M\";\r\n\r\n  /** \r\n   * init things\r\n   * */ \r\n\r\n  var SelectedPlanet;\r\n\r\n  const gui = new dat.GUI()\r\n\r\n  const scene = new THREE.Scene();\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  sceneRef.appendChild(renderer.domElement);\r\n\r\n  const sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n  }\r\n  const camera = new THREE.PerspectiveCamera(25, sizes.width / sizes.height, 0.1, 1000)\r\n  camera.position.x = -6;\r\n  camera.position.y = 0;\r\n  camera.position.z = 18;\r\n  scene.add(camera)\r\n\r\n\r\n  const headline = document.querySelector(\".headline_solar\");\r\n\r\n\r\n  /**\r\n   * MODEL Loading\r\n   */\r\n\r\n   const loader = new GLTFLoader();\r\n\r\n   loader.load(\r\n     './SolarSystemModel/scene.gltf',\r\n     ( gltf ) => {\r\n \r\n       const children = gltf.scene.children;\r\n       children.forEach((mesh) => {\r\n         mesh.position.x = 0;\r\n         mesh.position.y = 0;\r\n         mesh.position.z = 0;\r\n         mesh.scale.set(20, 20, 20)\r\n\r\n         // mesh.material.shading = THREE.SmoothShading;\r\n         // mesh.rotation.z = 11;\r\n       })\r\n\r\n      \r\n \r\n       // called when the resource is loaded\r\n       scene.add( gltf.scene );\r\n     },\r\n     ( xhr ) => {\r\n       // called while loading is progressing\r\n       console.log( `${( xhr.loaded / xhr.total * 100 )}% loaded` );\r\n     },\r\n     ( error ) => {\r\n       // called when loading has errors\r\n       console.error( 'An error happened', error );\r\n     },\r\n   );\r\n \r\n\r\n \r\n\r\n  /**\r\n   * Geometry && Meshes\r\n   * */\r\n\r\n  function distanceVector( v1, v2 )\r\n  {\r\n    var dx = v1.x - v2.x;\r\n    var dy = v1.y - v2.y;\r\n    var dz = v1.z - v2.z;\r\n\r\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n  }\r\n\r\n  const BoxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n  const CrystalGeomtry = new THREE.OctahedronBufferGeometry(.5);\r\n  const CircleGeometry = new THREE.RingGeometry(20, 20, 100);\r\n \r\n\r\n  // Materials\r\n\r\n  const metal = new THREE.MeshStandardMaterial();\r\n  metal.roughness = 0.3;\r\n  metal.metalness = 0.5;\r\n  metal.color = new THREE.Color(0xffffff);\r\n\r\n  const basic = new THREE.MeshBasicMaterial();\r\n  basic.transparent = true;\r\n  basic.opacity = 0.0;\r\n\r\n  const Linematerial = new THREE.LineBasicMaterial( { color: 0xf3652a, linewidth: 1, fog: true } );\r\n  const LinematerialB = new THREE.LineBasicMaterial( { color: 0x000000, linewidth: 1, fog: true } );\r\n  \r\n  // MESHES\r\n  const Cube = new THREE.Mesh(BoxGeometry , metal);\r\n\r\n  \r\n\r\n  // scene.add(Cube);\r\n\r\n  function planetButtons(x, y, z, size)\r\n  {\r\n    const SphereGeometry = new THREE.SphereBufferGeometry(size, 35, 35);\r\n    const btn = new THREE.Mesh(SphereGeometry, basic);\r\n    btn.position.set(x, y, z);\r\n\r\n    scene.add(btn);\r\n\r\n    return btn;\r\n  }\r\n\r\n  const Planets = {\r\n      \"Venus\": planetButtons(-5.65, -0.01, -8.94, 0.25),\r\n      \"Earth\": planetButtons(-4.93, 0, -8.08, 0.28),\r\n      \"Mars\": planetButtons(-4.26, 0, -6.96, 0.15),\r\n      \"Jupiter\": planetButtons(-1.79, -0.01, -3.7, 2.2),\r\n      \"Saturn\": planetButtons(1.07, 0, 1.67, 1.8),\r\n      \"Uran\": planetButtons(3.32, 0, 4.26, 1),\r\n      \"Npetune\": planetButtons(4.36, 0, 6.31, 0.8 ),\r\n      \"Sun\": planetButtons(11.7, 0, -25.9, 20)\r\n  }\r\n\r\n  const mercury = planetButtons(-6.35, 0.01, -10, 0.12);\r\n \r\n\r\n \r\n\r\n\r\n\r\n\r\n   /**\r\n    * LIGHTS\r\n    * */\r\n\r\n  const LeftLight = new THREE.PointLight(0xffffff, 1.5);\r\n  LeftLight.position.x = -2.1;\r\n  LeftLight.position.y = 3.4;\r\n  LeftLight.position.z = 6.4;\r\n  scene.add(LeftLight);\r\n\r\n  \r\n\r\n  /**\r\n   * Controls\r\n   */\r\n\r\n   function FocusPlanet(event)\r\n   {\r\n     event.preventDefault();\r\n \r\n     var vector = new THREE.Vector3(\r\n       (event.clientX / window.innerWidth) * 2 - 1, \r\n       -(event.clientY / window.innerHeight) * 2 + 1, 0.5\r\n     );\r\n     vector = vector.unproject(camera);\r\n \r\n     var raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n     var intersectsMercury = raycaster.intersectObject(mercury, true); \r\n     var interVenus = raycaster.intersectObject(Planets[\"Venus\"], true); \r\n     var interEarth = raycaster.intersectObject(Planets[\"Earth\"], true);\r\n     var interMars = raycaster.intersectObject(Planets[\"Mars\"], true);\r\n     var interJupiter = raycaster.intersectObject(Planets[\"Jupiter\"], true);\r\n     var interSaturn = raycaster.intersectObject(Planets[\"Saturn\"], true);\r\n     var interUran = raycaster.intersectObject(Planets[\"Uran\"], true);\r\n     var interNeptune = raycaster.intersectObject(Planets[\"Npetune\"], true);\r\n\r\n     var interSun = raycaster.intersectObject(Planets[\"Sun\"], true);\r\n\r\n     function Animate_focus(x, y, z)\r\n     {\r\n        gsap.to(camera.position,\r\n        {\r\n            duration: 1,\r\n            x: x,\r\n            y: y,\r\n            z: z,\r\n            stagger: 0.5\r\n        });\r\n\r\n        gsap.to(camera.rotation,\r\n        {\r\n            duration: 1,\r\n            y: -0.5,\r\n            stagger: 0.5, \r\n        });\r\n     }\r\n\r\n     const X = mercury.position.x;\r\n     const Y = mercury.position.y;\r\n     const Z = mercury.position.z;\r\n\r\n     // Neptun -> X + 8 && Z + 20\r\n\r\n\r\n     if (camera.position.x == -6 && camera.position.z == 18)\r\n     {\r\n         if (intersectsMercury.length > 0) {\r\n            Animate_focus(X - 2, Y, Z + 5,);\r\n            tag.innerHTML = \"M E R C U R Y\";\r\n            tag.innerHTML += `\r\n                <div>C L O S E S T &nbsp; T O &nbsp; T H E &nbsp; S U N</div>\r\n                <div>S M A L E S T &nbsp; P L A N E T</div>\r\n            `;\r\n         } else if (interVenus.length > 0) {\r\n            Animate_focus(X - 1.5, Y, Z + 5,);\r\n            tag.innerHTML = \"V E N U S\";\r\n            tag.innerHTML += `\r\n                <div>T O X I C &nbsp; A T M O S P H E R E</div>\r\n                <div>1 D A Y &nbsp; I S &nbsp; 2 4 3 &nbsp; E A R T H D A Y S</div>\r\n                <div>S U R F A C E - 3 9 0 ° C</div>\r\n            `;\r\n         } else if (interEarth.length > 0) {\r\n            Animate_focus(X, Y, Z + 5,);\r\n            tag.innerHTML = \"E A R T H\";\r\n            tag.innerHTML += `\r\n                <div>H A B I T A B L E</div>\r\n                <div>H A S &nbsp; M O O N</div>\r\n                <div>O U R &nbsp; H O M E</div>\r\n            `;\r\n         }else if (interMars.length > 0) {\r\n            Animate_focus(X + 1, Y, Z + 5,);\r\n            tag.innerHTML = \"M A R S\";\r\n            tag.innerHTML += `\r\n                <div>P O S S I B L Y &nbsp; H A B I T A B L E</div>\r\n                <div>W A T E R &nbsp; S O U R C E S</div>\r\n            `;\r\n         } \r\n         else if (interJupiter.length > 0) {\r\n            Animate_focus(X - 2, Y, Z + 20);\r\n            tag.innerHTML = \"J U P I T E R\";\r\n            tag.innerHTML += `\r\n                <div>B I G G E S T &nbsp; P L A N E T</div>\r\n                <div>G A S &nbsp; G I A N T</div>\r\n                <div>4 &nbsp; M O O N S</div>\r\n            `;\r\n         } else if (interSaturn.length > 0) {\r\n            Animate_focus(X + 0.5, Y, Z + 24, );\r\n            tag.innerHTML = \"S A T U R N\";\r\n            tag.innerHTML += `\r\n                <div>G A S &nbsp; G I A N T</div>\r\n                <div>82 &nbsp; M O O N S</div>\r\n                <div>G L O R I O U S &nbsp; R I N G S</div>\r\n            `;\r\n         } else if (interUran.length > 0) {\r\n            Animate_focus(X + 6.5 , Y, Z + 20);\r\n            tag.innerHTML = \"U R A N U S\";\r\n            tag.innerHTML += `\r\n                <div>I C E &nbsp; G I A N T</div>\r\n                <div>1 3 &nbsp; R I N G S</div>\r\n            `;\r\n         } else if (interNeptune.length > 0) {\r\n            Animate_focus(X + 8, Y, Z + 20);\r\n            tag.innerHTML = \"N E P T U N E\";\r\n            tag.innerHTML += `\r\n                <div>I C E &nbsp; G I A N T</div>\r\n                <div>F A I N T &nbsp; R I N G S</div>\r\n                <div>E L I P T I C A L &nbsp; O R B I T</div>\r\n            `;\r\n         } else if (interSun.length > 0) {\r\n            Animate_focus(X - 40, Y, Z + 85);\r\n            tag.innerHTML = \"S U N\";\r\n            tag.innerHTML += `\r\n                <div>C E N T E R &nbsp; O F &nbsp; S Y S T E M</div>\r\n                <div>2 7  &nbsp; M I L L I O N &nbsp; C °</div>\r\n                <div>Y E L L O W &nbsp; D W A R F</div>\r\n            `;\r\n         }\r\n     }\r\n\r\n\r\n\r\n\r\n \r\n     window.removeEventListener(\"touchend\", FocusPlanet);\r\n     window.addEventListener(\"click\", FocusPlanet);\r\n   }\r\n \r\n   function destroy()\r\n   {\r\n     window.removeEventListener(\"click\", FocusPlanet);\r\n     window.addEventListener(\"touchend\", FocusPlanet);\r\n   }\r\n \r\n   window.onload = function()\r\n   {\r\n     window.addEventListener(\"click\", FocusPlanet);\r\n     window.addEventListener(\"touchstart\", destroy);\r\n   }\r\n\r\n\r\n   window.onkeydown = function(glg) \r\n    {\r\n      if (glg.keyCode === 32)\r\n      { \r\n        gsap.to(camera.position, \r\n          {\r\n            duration: 1,\r\n            x: -6,\r\n            y: 0,\r\n            z: 18,\r\n            stagger: 0.5\r\n          });\r\n\r\n        gsap.to(camera.rotation, \r\n            {\r\n                duration: 1,\r\n                y: -0.32,\r\n                stagger: 0.5\r\n            });\r\n\r\n        tag.innerHTML = \"S O L A R S Y S T E M\"\r\n      } \r\n      else if (glg.keyCode === 27)\r\n      {\r\n          window.location.href = \"https://SightMan3.github.io/\"\r\n      }\r\n    }\r\n\r\n\r\n  /**\r\n   * Rendering\r\n   * */\r\n\r\n\r\n  window.addEventListener('resize', () =>\r\n  {\r\n    // Update sizes\r\n    sizes.width = window.innerWidth\r\n      sizes.height = window.innerHeight\r\n\r\n      // Update camera\r\n      camera.aspect = sizes.width / sizes.height\r\n      camera.updateProjectionMatrix()\r\n      \r\n      // Update renderer\r\n      renderer.setSize(sizes.width, sizes.height)\r\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n      \r\n\r\n    })\r\n\r\n  \r\n    \r\n  let controls = new OrbitControls(camera, sceneRef);\r\n  controls.enableZoom = false;\r\n  controls.update();\r\n  \r\n\r\n  const animate = function () {\r\n    requestAnimationFrame(animate);\r\n    \r\n    renderer.render(scene, camera);\r\n   \r\n    \r\n  };\r\n  \r\n  // Call the animate function\r\n  \r\n  animate();\r\n  \r\n  \r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport StarCluster from \"./components/StarCluster\"\r\nimport SolarSystem from \"./components/SolarSystem\"\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {\r\n    BrowserRouter,\r\n    Routes,\r\n    Route\r\n  } from \"react-router-dom\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Routes>\r\n            <Route path=\"/\" element={<StarCluster />} />\r\n            <Route path=\"/BlackHole\" element={<App />} />\r\n            <Route path=\"/SolarSystem\" element={<SolarSystem />} />\r\n        </Routes>\r\n    </BrowserRouter>,\r\n    rootElement\r\n);\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}